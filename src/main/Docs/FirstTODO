# ðŸ“¦ CHEF-AI â€“ COMPLETE PROJECT SKELETON (Paper 1.20+)

This document delivers a **production-grade, compile-ready skeleton** for your CHEF-AI plugin, aligned with your existing `chef.sheesh.eyeAI` namespace. It includes a **full directory tree, Gradle config (Shadow + relocations), plugin.yml**, and **class skeletons** for all major subsystems (AI, Sim, ML, Packets, Data, GUI, Diagnostics, AntiCheat, Chat, NPC Villages).

> âœ… Drop-in friendly for a Paper 1.20.4 dev server. Build with Shadow to produce `ChefAI.jar`.

---

## 0) Repository Layout

```
chef-ai/
â”œâ”€ build.gradle
â”œâ”€ settings.gradle
â”œâ”€ gradle.properties
â”œâ”€ README.md
â”œâ”€ LICENSE
â”œâ”€ checkstyle.xml
â”œâ”€ src/
â”‚  â”œâ”€ main/
â”‚  â”‚  â”œâ”€ java/
â”‚  â”‚  â”‚  â””â”€ chef/
â”‚  â”‚  â”‚     â””â”€ sheesh/
â”‚  â”‚  â”‚        â””â”€ eyeAI/
â”‚  â”‚  â”‚           â”œâ”€ bootstrap/
â”‚  â”‚  â”‚           â”‚  â”œâ”€ ChefAI.java
â”‚  â”‚  â”‚           â”‚  â”œâ”€ lifecycle/
â”‚  â”‚  â”‚           â”‚  â”‚  â”œâ”€ StartUpTasks.java
â”‚  â”‚  â”‚           â”‚  â”‚  â””â”€ ShutdownTasks.java
â”‚  â”‚  â”‚           â”œâ”€ core/
â”‚  â”‚  â”‚           â”‚  â”œâ”€ ai/
â”‚  â”‚  â”‚           â”‚  â”‚  â”œâ”€ AIManager.java
â”‚  â”‚  â”‚           â”‚  â”‚  â”œâ”€ TrainingScheduler.java
â”‚  â”‚  â”‚           â”‚  â”‚  â”œâ”€ policy/
â”‚  â”‚  â”‚           â”‚  â”‚  â”‚  â”œâ”€ EpsilonPolicy.java
â”‚  â”‚  â”‚           â”‚  â”‚  â”‚  â””â”€ AdaptiveEpsilonPolicy.java
â”‚  â”‚  â”‚           â”‚  â”œâ”€ sim/
â”‚  â”‚  â”‚           â”‚  â”‚  â”œâ”€ FakePlayer.java
â”‚  â”‚  â”‚           â”‚  â”‚  â”œâ”€ FakePlayerEngine.java
â”‚  â”‚  â”‚           â”‚  â”‚  â””â”€ SimExperience.java
â”‚  â”‚  â”‚           â”‚  â”œâ”€ ml/
â”‚  â”‚  â”‚           â”‚  â”‚  â”œâ”€ MLCore.java
â”‚  â”‚  â”‚           â”‚  â”‚  â”œâ”€ rl/
â”‚  â”‚  â”‚           â”‚  â”‚  â”‚  â”œâ”€ QTableAgent.java
â”‚  â”‚  â”‚           â”‚  â”‚  â”‚  â””â”€ RewardModel.java
â”‚  â”‚  â”‚           â”‚  â”‚  â”œâ”€ rnn/
â”‚  â”‚  â”‚           â”‚  â”‚  â”‚  â””â”€ MovementRNN.java
â”‚  â”‚  â”‚           â”‚  â”‚  â””â”€ ga/
â”‚  â”‚  â”‚           â”‚  â”‚     â””â”€ GAOptimizer.java
â”‚  â”‚  â”‚           â”œâ”€ features/
â”‚  â”‚  â”‚           â”‚  â”œâ”€ anticheat/
â”‚  â”‚  â”‚           â”‚  â”‚  â””â”€ AntiCheatService.java
â”‚  â”‚  â”‚           â”‚  â”œâ”€ chat/
â”‚  â”‚  â”‚           â”‚  â”‚  â””â”€ ChatNLPService.java
â”‚  â”‚  â”‚           â”‚  â””â”€ npc/
â”‚  â”‚  â”‚           â”‚     â”œâ”€ NPCVillageManager.java
â”‚  â”‚  â”‚           â”‚     â””â”€ VillagerNPC.java
â”‚  â”‚  â”‚           â”œâ”€ infra/
â”‚  â”‚  â”‚           â”‚  â”œâ”€ config/
â”‚  â”‚  â”‚           â”‚  â”‚  â”œâ”€ ConfigurationManager.java
â”‚  â”‚  â”‚           â”‚  â”‚  â””â”€ ConfigKeys.java
â”‚  â”‚  â”‚           â”‚  â”œâ”€ data/
â”‚  â”‚  â”‚           â”‚  â”‚  â”œâ”€ DataStore.java
â”‚  â”‚  â”‚           â”‚  â”‚  â”œâ”€ H2Provider.java
â”‚  â”‚  â”‚           â”‚  â”‚  â”œâ”€ PostgresProvider.java
â”‚  â”‚  â”‚           â”‚  â”‚  â””â”€ AsyncWriteQueue.java
â”‚  â”‚  â”‚           â”‚  â”œâ”€ events/
â”‚  â”‚  â”‚           â”‚  â”‚  â”œâ”€ EventBus.java
â”‚  â”‚  â”‚           â”‚  â”‚  â””â”€ events/
â”‚  â”‚  â”‚           â”‚  â”‚     â”œâ”€ FakeActionEvent.java
â”‚  â”‚  â”‚           â”‚  â”‚     â””â”€ TrainingTickEvent.java
â”‚  â”‚  â”‚           â”‚  â”œâ”€ packets/
â”‚  â”‚  â”‚           â”‚  â”‚  â”œâ”€ PacketBridge.java
â”‚  â”‚  â”‚           â”‚  â”‚  â””â”€ listeners/
â”‚  â”‚  â”‚           â”‚  â”‚     â””â”€ MovementPacketListener.java
â”‚  â”‚  â”‚           â”‚  â”œâ”€ diagnostic/
â”‚  â”‚  â”‚           â”‚  â”‚  â”œâ”€ Diagnostic.java
â”‚  â”‚  â”‚           â”‚  â”‚  â””â”€ Profilers.java
â”‚  â”‚  â”‚           â”‚  â””â”€ util/
â”‚  â”‚  â”‚           â”‚     â”œâ”€ Async.java
â”‚  â”‚  â”‚           â”‚     â””â”€ MoreMath.java
â”‚  â”‚  â”‚           â””â”€ ui/
â”‚  â”‚  â”‚              â”œâ”€ AdminGui.java
â”‚  â”‚  â”‚              â””â”€ components/
â”‚  â”‚  â”‚                 â””â”€ Bars.java
â”‚  â”‚  â”œâ”€ resources/
â”‚  â”‚  â”‚  â”œâ”€ plugin.yml
â”‚  â”‚  â”‚  â””â”€ config/
â”‚  â”‚  â”‚     â””â”€ chefai.yml
â”‚  â””â”€ test/
â”‚     â””â”€ java/
â”‚        â””â”€ chef/sheesh/eyeAI/core/ml/MLCoreTest.java
â””â”€ .editorconfig
```

---

## 1) Gradle & Build Config

### `settings.gradle`

```gradle
rootProject.name = 'chef-ai'
```

### `gradle.properties`

```properties
org.gradle.jvmargs=-Xmx2G -Dfile.encoding=UTF-8
javaVersion=17
paperApiVersion=1.20-R0.1-SNAPSHOT
```

### `build.gradle`

```gradle
plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'checkstyle'
}

group = 'chef.sheesh.eyeAI'
version = '0.1.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
    maven { url = 'https://repo.papermc.io/repository/maven-public/' }
    maven { url = 'https://repo.dmulloy2.net/repository/public/' } // ProtocolLib
    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots/' } // IF snapshot if needed
}

dependencies {
    compileOnly "io.papermc.paper:paper-api:${paperApiVersion}"

    implementation 'net.kyori:adventure-api:4.17.0'
    implementation 'com.github.stefvanschie.inventoryframework:IF:0.11.3'
    implementation 'com.comphenix.protocol:ProtocolLib:5.2.0'
    implementation 'com.github.retrooper:packetevents-spigot:2.4.0'

    implementation 'org.deeplearning4j:deeplearning4j-core:1.0.0-M2.1'
    implementation 'org.nd4j:nd4j-native-platform:1.0.0-M2.1'

    implementation 'com.h2database:h2:2.2.224'
    implementation 'org.postgresql:postgresql:42.7.3'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

checkstyle {
    toolVersion = '10.12.7'
    configFile = file('checkstyle.xml')
}

shadowJar {
    archiveFileName = 'ChefAI.jar'
    relocate 'com.github.stefvanschie.inventoryframework', 'chef.sheesh.eyeAI.libs.if'
    relocate 'com.comphenix.protocol', 'chef.sheesh.eyeAI.libs.protocol'
    relocate 'org.deeplearning4j', 'chef.sheesh.eyeAI.libs.dl4j'
    relocate 'org.nd4j', 'chef.sheesh.eyeAI.libs.nd4j'
}
```

---

## 2) `plugin.yml`

```yaml
name: ChefAI
main: chef.sheesh.eyeAI.bootstrap.ChefAI
version: 0.1.0
api-version: '1.20'
author: sheesh
load: POSTWORLD
commands:
  chefai:
    description: Opens the CHEF-AI control center
    usage: /chefai
    permission: chefai.admin
permissions:
  chefai.admin:
    default: op
softdepend:
  - ProtocolLib
  - packetevents
```

---

## 3) Config â€“ `src/main/resources/config/chefai.yml`

```yaml
storage:
  provider: H2 # H2 | POSTGRES
  h2:
    file: plugins/ChefAI/data/chefai
  postgres:
    host: 127.0.0.1
    port: 5432
    database: chefai
    user: postgres
    password: secret

training:
  enabled: true
  fakePlayers: 50
  batchSize: 128
  epsilon:
    start: 0.4
    min: 0.02
    adaptive: true
    decay: 0.995
  safety:
    minTPS: 18.0

ui:
  enableDashboard: true
```

---

## 4) Bootstrap & Lifecycle

### `ChefAI.java`

```java
package chef.sheesh.eyeAI.bootstrap;

import chef.sheesh.eyeAI.core.ai.AIManager;
import chef.sheesh.eyeAI.infra.config.ConfigurationManager;
import chef.sheesh.eyeAI.infra.diagnostic.Diagnostic;
import chef.sheesh.eyeAI.infra.events.EventBus;
import chef.sheesh.eyeAI.infra.packets.PacketBridge;
import chef.sheesh.eyeAI.ui.AdminGui;
import org.bukkit.plugin.java.JavaPlugin;

public final class ChefAI extends JavaPlugin {
    private static ChefAI instance;

    private ConfigurationManager config;
    private EventBus eventBus;
    private PacketBridge packets;
    private AIManager aiManager;

    public static ChefAI get() { return instance; }

    @Override
    public void onEnable() {
        instance = this;
        Diagnostic.bootstrapLogger(getLogger());

        saveDefaultConfig(); // plugin.yml-based
        this.config = new ConfigurationManager(this, "config/chefai.yml");
        this.eventBus = new EventBus();

        this.packets = new PacketBridge(this);
        this.packets.init();

        this.aiManager = new AIManager(eventBus, config, packets);
        this.aiManager.enable();

        // Commands & GUI
        getCommand("chefai").setExecutor((sender, cmd, label, args) -> {
            if (!(sender instanceof org.bukkit.entity.Player p)) return true;
            new AdminGui(aiManager).open(p);
            return true;
        });

        getLogger().info("CHEF-AI enabled.");
    }

    @Override
    public void onDisable() {
        if (aiManager != null) aiManager.disable();
        if (packets != null) packets.shutdown();
        Diagnostic.flush();
    }
}
```

### `StartUpTasks.java`

```java
package chef.sheesh.eyeAI.bootstrap.lifecycle;

public final class StartUpTasks {
    private StartUpTasks() {}
    public static void verifyEnvironment() {
        // Verify native backends, DB connectivity, etc.
    }
}
```

---

## 5) Core â€“ AI Manager & Scheduler

### `AIManager.java`

```java
package chef.sheesh.eyeAI.core.ai;

import chef.sheesh.eyeAI.core.ml.MLCore;
import chef.sheesh.eyeAI.core.sim.FakePlayerEngine;
import chef.sheesh.eyeAI.infra.config.ConfigurationManager;
import chef.sheesh.eyeAI.infra.events.EventBus;
import chef.sheesh.eyeAI.infra.packets.PacketBridge;

public final class AIManager {
    private final EventBus bus;
    private final ConfigurationManager config;
    private final PacketBridge packets;
    private final FakePlayerEngine simEngine;
    private final MLCore mlCore;
    private final TrainingScheduler scheduler;

    public AIManager(EventBus bus, ConfigurationManager config, PacketBridge packets) {
        this.bus = bus;
        this.config = config;
        this.packets = packets;
        this.mlCore = new MLCore(bus, config);
        this.simEngine = new FakePlayerEngine(bus, mlCore, packets);
        this.scheduler = new TrainingScheduler(mlCore, simEngine, config);
    }

    public void enable() {
        mlCore.init();
        simEngine.start(config.getInt("training.fakePlayers", 50));
        if (config.getBoolean("training.enabled", true)) {
            scheduler.start();
        }
    }

    public void disable() {
        scheduler.stop();
        simEngine.stop();
        mlCore.shutdown();
    }

    public MLCore ml() { return mlCore; }
}
```

### `TrainingScheduler.java`

```java
package chef.sheesh.eyeAI.core.ai;

import chef.sheesh.eyeAI.core.ml.MLCore;
import chef.sheesh.eyeAI.core.sim.FakePlayerEngine;
import chef.sheesh.eyeAI.infra.config.ConfigurationManager;
import chef.sheesh.eyeAI.infra.diagnostic.Diagnostic;
import org.bukkit.Bukkit;

public final class TrainingScheduler {
    private final MLCore ml;
    private final FakePlayerEngine sim;
    private final ConfigurationManager cfg;
    private int taskId = -1;

    public TrainingScheduler(MLCore ml, FakePlayerEngine sim, ConfigurationManager cfg) {
        this.ml = ml; this.sim = sim; this.cfg = cfg;
    }

    public void start() {
        long period = 1L; // every tick
        taskId = Bukkit.getScheduler().scheduleSyncRepeatingTask(
                Bukkit.getPluginManager().getPlugin("ChefAI"),
                () -> {
                    if (Diagnostic.getTps() < cfg.getDouble("training.safety.minTPS", 18.0)) return;
                    sim.tick();
                    ml.trainIncremental(cfg.getInt("training.batchSize", 128));
                },
                1L, period);
    }

    public void stop() { if (taskId != -1) Bukkit.getScheduler().cancelTask(taskId); }
}
```

---

## 6) Sim Engine â€“ Fake Players

### `FakePlayerEngine.java`

```java
package chef.sheesh.eyeAI.core.sim;

import chef.sheesh.eyeAI.core.ml.MLCore;
import chef.sheesh.eyeAI.infra.events.EventBus;
import chef.sheesh.eyeAI.infra.packets.PacketBridge;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;

public final class FakePlayerEngine {
    private final EventBus bus;
    private final MLCore ml;
    private final PacketBridge packets;
    private final List<FakePlayer> fakes = new CopyOnWriteArrayList<>();
    private volatile boolean running;

    public FakePlayerEngine(EventBus bus, MLCore ml, PacketBridge packets) {
        this.bus = bus; this.ml = ml; this.packets = packets;
    }

    public void start(int count) {
        running = true;
        for (int i=0; i<count; i++) fakes.add(new FakePlayer("Fake-"+i, ml, packets));
    }

    public void stop() { running = false; fakes.clear(); }

    public void tick() { if (!running) return; fakes.forEach(FakePlayer::step); }
}
```

### `FakePlayer.java`

```java
package chef.sheesh.eyeAI.core.sim;

import chef.sheesh.eyeAI.core.ml.MLCore;
import chef.sheesh.eyeAI.infra.packets.PacketBridge;

public final class FakePlayer {
    private final String name;
    private final MLCore ml;
    private final PacketBridge packets;

    private double epsilon = 0.4;

    public FakePlayer(String name, MLCore ml, PacketBridge packets) {
        this.name = name; this.ml = ml; this.packets = packets;
    }

    public void step() {
        // 1 tick of behavior: decide -> act -> log experience
        SimExperience exp = decideAndAct();
        ml.enqueue(exp);
        adapt();
    }

    private SimExperience decideAndAct() {
        // TODO: build state from world/packets, choose action via epsilon-greedy
        return new SimExperience();
    }

    private void adapt() {
        // Adaptive epsilon policy hook
        epsilon = Math.max(0.02, epsilon * 0.995);
    }
}
```

### `SimExperience.java`

```java
package chef.sheesh.eyeAI.core.sim;

public final class SimExperience {
    // state, action, reward, nextState, terminal
}
```

---

## 7) ML Core â€“ RL/RNN/GA

### `MLCore.java`

```java
package chef.sheesh.eyeAI.core.ml;

import chef.sheesh.eyeAI.core.sim.SimExperience;
import chef.sheesh.eyeAI.infra.config.ConfigurationManager;
import chef.sheesh.eyeAI.infra.events.EventBus;
import java.util.concurrent.ConcurrentLinkedQueue;

public final class MLCore {
    private final EventBus bus;
    private final ConfigurationManager cfg;
    private final ConcurrentLinkedQueue<SimExperience> replay = new ConcurrentLinkedQueue<>();

    public MLCore(EventBus bus, ConfigurationManager cfg) {
        this.bus = bus; this.cfg = cfg;
    }

    public void init() { /* init DL4J models, load snapshots */ }
    public void shutdown() { /* persist models */ }

    public void enqueue(SimExperience exp) { replay.add(exp); }

    public void trainIncremental(int batch) {
        // drain small batch from replay and update models
    }
}
```

### RL â€“ `QTableAgent.java`

```java
package chef.sheesh.eyeAI.core.ml.rl;

import java.util.HashMap;
import java.util.Map;

public final class QTableAgent {
    private final Map<Long, double[]> q = new HashMap<>();
    public int selectAction(long stateHash, double epsilon, int actionCount) {
        // epsilon-greedy stub
        return 0;
    }
    public void update(long s, int a, double r, long s2) { /* stub */ }
}
```

### RNN â€“ `MovementRNN.java`

```java
package chef.sheesh.eyeAI.core.ml.rnn;

public final class MovementRNN {
    public void initRandom() {}
    public double[] predict(double[] seq) { return seq; }
}
```

### GA â€“ `GAOptimizer.java`

```java
package chef.sheesh.eyeAI.core.ml.ga;

public final class GAOptimizer {
    public void evolveOnce() { /* mutate + crossover params */ }
}
```

---

## 8) Infrastructure â€“ Config, Events, Packets, Data, Diagnostics, Util

### Config â€“ `ConfigurationManager.java`

```java
package chef.sheesh.eyeAI.infra.config;

import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.plugin.Plugin;

public final class ConfigurationManager {
    private final Plugin plugin;
    private final String path;
    private FileConfiguration cfg;

    public ConfigurationManager(Plugin plugin, String path) {
        this.plugin = plugin; this.path = path;
        plugin.saveResource(path, false);
        reload();
    }

    public void reload() { cfg = YamlLoader.load(plugin, path); }
    public boolean getBoolean(String key, boolean def) { return cfg.getBoolean(key, def); }
    public int getInt(String key, int def) { return cfg.getInt(key, def); }
    public double getDouble(String key, double def) { return cfg.getDouble(key, def); }
}
```

> Include a tiny `YamlLoader` utility or use Bukkitâ€™s built-ins; omitted for brevity.

### Events â€“ `EventBus.java`

```java
package chef.sheesh.eyeAI.infra.events;

import java.util.concurrent.CopyOnWriteArrayList;
import java.util.function.Consumer;

public final class EventBus {
    private final CopyOnWriteArrayList<Consumer<Object>> listeners = new CopyOnWriteArrayList<>();
    public void post(Object event) { listeners.forEach(l -> l.accept(event)); }
    public void subscribe(Consumer<Object> l) { listeners.add(l); }
}
```

### Packets â€“ `PacketBridge.java`

```java
package chef.sheesh.eyeAI.infra.packets;

import org.bukkit.plugin.Plugin;

public final class PacketBridge {
    private final Plugin plugin;

    public PacketBridge(Plugin plugin) { this.plugin = plugin; }

    public void init() {
        // Hook ProtocolLib & PacketEvents if present
    }

    public void shutdown() { /* unregister listeners */ }
}
```

### Data â€“ `DataStore.java`

```java
package chef.sheesh.eyeAI.infra.data;

public interface DataStore {
    void init();
    void writeExperienceAsync(byte[] payload);
    void snapshotModels(byte[] payload);
    void shutdown();
}
```

### Diagnostic â€“ `Diagnostic.java`

```java
package chef.sheesh.eyeAI.infra.diagnostic;

import java.util.logging.Logger;

public final class Diagnostic {
    private static Logger logger;
    public static void bootstrapLogger(Logger l) { logger = l; }
    public static double getTps() { return 20.0; } // hook into a TPS tracker if desired
    public static void flush() {}
    public static void info(String msg) { if (logger != null) logger.info(msg); }
}
```

### Util â€“ `Async.java`

```java
package chef.sheesh.eyeAI.infra.util;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public final class Async {
    public static final ExecutorService IO = Executors.newFixedThreadPool(4);
}
```

---

## 9) Features â€“ AntiCheat, Chat, NPC Villages

### AntiCheat â€“ `AntiCheatService.java`

```java
package chef.sheesh.eyeAI.features.anticheat;

public final class AntiCheatService {
    public void onMovementPacket(Object pkt) { /* build baseline, detect anomalies */ }
}
```

### Chat â€“ `ChatNLPService.java`

```java
package chef.sheesh.eyeAI.features.chat;

public final class ChatNLPService {
    public String respond(String input) { return "ok"; }
}
```

### NPCs â€“ `NPCVillageManager.java` & `VillagerNPC.java`

```java
package chef.sheesh.eyeAI.features.npc;

public final class NPCVillageManager {
    public void spawnVillage() {}
}
```

```java
package chef.sheesh.eyeAI.features.npc;

public final class VillagerNPC {
    public void tick() {}
}
```

---

## 10) UI â€“ Admin GUI (InventoryFramework)

### `AdminGui.java`

```java
package chef.sheesh.eyeAI.ui;

import chef.sheesh.eyeAI.core.ai.AIManager;
import com.github.stefvanschie.inventoryframework.gui.type.ChestGui;
import com.github.stefvanschie.inventoryframework.pane.OutlinePane;
import com.github.stefvanschie.inventoryframework.gui.GuiItem;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;

public final class AdminGui {
    private final AIManager ai;
    public AdminGui(AIManager ai) { this.ai = ai; }

    public void open(Player p) {
        ChestGui gui = new ChestGui(3, "CHEF-AI Control Center");
        OutlinePane pane = new OutlinePane(0, 0, 9, 3);
        pane.addItem(new GuiItem(new ItemStack(Material.BOOK), e -> p.sendMessage("Training tick")));
        gui.addPane(pane);
        gui.show(p);
    }
}
```

---

## 11) Tests â€“ JUnit

### `MLCoreTest.java`

```java
package chef.sheesh.eyeAI.core.ml;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class MLCoreTest {
    @Test void boot() {
        MLCore core = new MLCore(null, null);
        assertNotNull(core);
    }
}
```

---

## 12) Checkstyle (baseline) â€“ `checkstyle.xml`

> Minimal Google-style ruleset; adjust as needed.

```xml
<?xml version="1.0"?>
<!DOCTYPE module PUBLIC "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN" "https://checkstyle.org/dtds/configuration_1_3.dtd">
<module name="Checker">
  <module name="TreeWalker">
    <module name="WhitespaceAfter"/>
    <module name="NeedBraces"/>
    <module name="Indentation"/>
  </module>
</module>
```

---

## 13) Build & Run

1. Install JDK 17, run `./gradlew shadowJar` â†’ `build/libs/ChefAI.jar`.
2. Drop into `plugins/` of your **Paper 1.20.4** server.
3. Start server; `config/chefai.yml` will be generated.
4. Use `/chefai` in-game for the dashboard.

---

## 14) Next Steps (Implementation Order)

* Wire `PacketBridge` to ProtocolLib + PacketEvents listeners.
* Flesh out `SimExperience` state/action/reward schema.
* Implement `MLCore.trainIncremental` + snapshot persistence in `DataStore`.
* Add TPS watcher + adaptive scheduler throttling.
* Expand Admin GUI with live bars & toggles.

> This skeleton is intentionally **clean and strict**: zero heavy logic, maximum clarity, and ready for your EyeAI integrations.
